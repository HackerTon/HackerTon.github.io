{"version":3,"sources":["logo.svg","serviceWorker.js","webfront.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","React","Component","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleSubmit","bind","assertThisInitialized","handleChange","event","files","target","setState","type","data","FormData","append","xhr","XMLHttpRequest","onreadystatechange","readyState","DONE","response","JSON","parse","responseText","alert","status","open","send","preventDefault","react_default","a","createElement","className","name","onChange","onClick","Main","row_array","column_array","column","row","local","controls","src","push","Fragment","src_Form","ReactDOM","render","src_Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8OCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBkBC,IAAMC,UAYHD,IAAMC,UAgCZD,IAAMC,cCrCrBC,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,MAAO,IAGXR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IAPLA,4EAWNa,GACT,IAAIC,EAAQD,EAAME,OAAOD,MAEzBX,KAAKa,SAAS,CAAER,MAAOM,yCAIdD,GACT,GAAIV,KAAKI,MAAMC,MACX,GAAiC,eAA7BL,KAAKI,MAAMC,MAAM,GAAGS,KAAuB,CAC3C,IAAIC,EAAO,IAAIC,SACfD,EAAKE,OAAO,QAASjB,KAAKI,MAAMC,MAAM,IAEtC,IAAIa,EAAM,IAAIC,eAEdD,EAAIE,mBAAqB,WACrB,GAAIF,EAAIG,aAAeH,EAAII,KAAM,CAE7B,IAAIC,EAAWC,KAAKC,MAAMP,EAAIQ,cAE9BC,MAAMJ,EAASK,UAKvBV,EAAIW,KAAK,OAAQ,iCAAiC,GAClDX,EAAIY,KAAKf,QAETY,MAAM3B,KAAKI,MAAMC,MAAM,GAAGS,KAAO,kBAGzCJ,EAAMqB,kDAIN,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,qBACSF,EAAAC,EAAAC,cAAA,YACLF,EAAAC,EAAAC,cAAA,SAAOpB,KAAK,OAAOsB,KAAK,QAAQC,SAAUrC,KAAKS,iBAGvDuB,EAAAC,EAAAC,cAAA,UAAQI,QAAStC,KAAKM,cAAtB,kBAvDGb,IAAMC,WAgEnB6C,mLAKE,IAHA,IAAIC,EAAY,GACZC,EAAe,GAEVC,EAAS,EAAc,IAAXA,EAAcA,IAAU,CACzC,IAAK,IAAIC,EAAM,EAAW,IAARA,EAAWA,IAAO,CAChC,IAAMC,EAAQ,CACVZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,SAAOW,UAAQ,GACXb,EAAAC,EAAAC,cAAA,UAAQY,IAAI,+PAA+PhC,KAAK,eAGnR,IAIT0B,EAAUO,KAAKH,GAGnB,IAAMA,EAAQ,CACVZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACVK,IAITC,EAAaM,KAAKH,GAClBJ,EAAY,GAGhB,OACIR,EAAAC,EAAAC,cAAAF,EAAAC,EAAAe,SAAA,KACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,WACAH,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,iBAEjBF,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAAA,WACKO,WAtCFhD,IAAMC,WA8CzBwD,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAAUC,SAASC,eAAe,SFU5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.648ee2aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nclass SearchBar extends React.Component {\n    render() {\n        return (\n            <div>\n                <form>\n                    <input type='text' placeholder=\"Search\" />\n                </form>\n            </div>\n        )\n    }\n}\n\nclass ShoppingList extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { date: new Date() }\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        )\n    }\n\n    componentWillMount() {\n        clearInterval(this.timerID)\n    }\n\n    tick() {\n        this.setState({\n            date: new Date()\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Current time {this.state.date.toLocaleTimeString()}.</h1>\n            </div>\n        )\n    }\n}\n\nclass Toggle extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { isToggleOn: true, date: \"\" }\n\n        this.handleClick = this.handleClick.bind(this)\n\n    }\n\n    handleClick() {\n        console.log(\"Click!!\")\n\n        fetch(\"http://worldclockapi.com/api/json/est/now\")\n            .then(res => res.json())\n            .then(\n                result => {\n                    this.setState({ date: result.currentFileTime })\n                }\n            )\n\n        this.setState(state => ({\n            isToggleOn: !state.isToggleOn\n        }))\n    }\n\n    render() {\n        return (\n            [\n                <div>\n                    <p>{this.state.date}</p>\n                    <button onClick={this.handleClick}>\n                        {this.state.isToggleOn ? 'ON' : 'OFF'}\n                    </button>\n                </div>\n            ]\n        )\n    }\n}\n\nexport { SearchBar, ShoppingList, Toggle };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { SearchBar, Toggle } from './webfront';\n\n\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            value: {}\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n\n    handleChange(event) {\n        let files = event.target.files\n\n        this.setState({ value: files })\n\n    }\n\n    handleSubmit(event) {\n        if (this.state.value) {\n            if (this.state.value[0].type === \"image/jpeg\") {\n                let data = new FormData()\n                data.append('image', this.state.value[0])\n\n                var xhr = new XMLHttpRequest()\n\n                xhr.onreadystatechange = () => {\n                    if (xhr.readyState === xhr.DONE) {\n\n                        let response = JSON.parse(xhr.responseText)\n\n                        alert(response.status)\n                        // alert('Image had been submitted!')\n                    }\n                }\n\n                xhr.open(\"POST\", 'https://127.0.0.1/upload/post', true)\n                xhr.send(data)\n            } else {\n                alert(this.state.value[0].type + 'not supported!')\n            }\n        }\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div className='form-box'>\n                <form>\n                    <label>\n                        Image<pre />\n                        <input type=\"file\" name=\"image\" onChange={this.handleChange} />\n                    </label>\n                </form>\n                <button onClick={this.handleSubmit}>Submit</button>\n            </div>\n        )\n    }\n\n\n}\n\n\nclass Main extends React.Component {\n    render() {\n        let row_array = []\n        let column_array = []\n\n        for (let column = 0; column !== 3; column++) {\n            for (let row = 0; row !== 3; row++) {\n                const local = [\n                    <div className='flex-column'>\n                        <video controls>\n                            <source src=\"https://gcs-vimeo.akamaized.net/exp=1562447337~acl=%2A%2F1315757108.mp4%2A~hmac=45be40af5be05f1a06533e9a36ddbcb24d6f00a051bb5e6fdace423488cfae98/vimeo-prod-skyfire-std-us/01/1715/13/333575697/1315757108.mp4?download=1&filename=Pexels+Videos+2257010.mp4\" type=\"video/mp4\">\n                            </source>\n                        </video>\n                        {0}\n                    </div>\n                ]\n\n                row_array.push(local)\n            }\n\n            const local = [\n                <div className='flex-row'>\n                    {row_array}\n                </div>\n            ]\n\n            column_array.push(local)\n            row_array = []\n        }\n\n        return (\n            <>\n                <div className='header'>\n                    <div className='title'>TrainAI</div>\n                    <p>Federated <b>AI</b></p>\n                </div>\n                <Form />\n                <div>\n                    {column_array}\n                </div>\n            </>\n        )\n    }\n}\n\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}