{"version":3,"sources":["serviceWorker.js","index.js","webfront.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Main","React","Component","x","vas","react_default","a","createElement","className","width","height","controls","src","type","index","push","ReactDOM","render","src_Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"sQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECXAC,GCLkBC,IAAMC,UAYHD,IAAMC,UAgCZD,IAAMC,2LD1BnB,IAVA,IAAIC,EAAI,GAEFC,EAAM,CACRC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOE,MAAM,MAAMC,OAAO,MAAMC,UAAQ,GACpCN,EAAAC,EAAAC,cAAA,UAAQK,IAAI,8PAA8PC,KAAK,iBAKlRC,EAAQ,EAAa,IAAVA,EAAaA,IAC7BX,EAAEY,KAAKX,GAGX,OACIC,EAAAC,EAAAC,cAAA,WAIIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,eAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVL,WA3BFF,IAAMC,YAmCzBc,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAAUC,SAASC,eAAe,SDuF5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCGnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.f8684b7c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { SearchBar, Toggle } from './webfront';\n\nclass Main extends React.Component {\n    render() {\n\n        var x = []\n\n        const vas = [\n            <div className='pad'>\n                <video width=\"400\" height=\"300\" controls>\n                    <source src=\"https://gcs-vimeo.akamaized.net/exp=1562003114~acl=%2A%2F1274386773.mp4%2A~hmac=8e38e5b156e4e64cb1028716d956c8f0e18b679a691e13529fcca54c0b9b48ca/vimeo-prod-skyfire-std-us/01/145/13/325725646/1274386773.mp4?download=1&filename=Pexels+Videos+2046575.mp4\" type=\"video/mp4\"></source>\n                </video>\n            </div>\n        ]\n\n        for (let index = 0; index !== 9; index++) {\n            x.push(vas)\n        }\n\n        return (\n            <div>\n                {/* <SearchBar />\n                <Toggle />\n                {x} */}\n                <div className='rectangle'>\n                    Materialist\n                </div>\n\n                <div className='container'>\n                    {x}\n                </div>\n            </div>\n        )\n    }\n}\n\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\nclass SearchBar extends React.Component {\n    render() {\n        return (\n            <div>\n                <form>\n                    <input type='text' placeholder=\"Search\" />\n                </form>\n            </div>\n        )\n    }\n}\n\nclass ShoppingList extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { date: new Date() }\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        )\n    }\n\n    componentWillMount() {\n        clearInterval(this.timerID)\n    }\n\n    tick() {\n        this.setState({\n            date: new Date()\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Current time {this.state.date.toLocaleTimeString()}.</h1>\n            </div>\n        )\n    }\n}\n\nclass Toggle extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { isToggleOn: true, date: \"\" }\n\n        this.handleClick = this.handleClick.bind(this)\n\n    }\n\n    handleClick() {\n        console.log(\"Click!!\")\n\n        fetch(\"http://worldclockapi.com/api/json/est/now\")\n            .then(res => res.json())\n            .then(\n                result => {\n                    this.setState({ date: result.currentFileTime })\n                }\n            )\n\n        this.setState(state => ({\n            isToggleOn: !state.isToggleOn\n        }))\n    }\n\n    render() {\n        return (\n            [\n                <div>\n                    <p>{this.state.date}</p>\n                    <button onClick={this.handleClick}>\n                        {this.state.isToggleOn ? 'ON' : 'OFF'}\n                    </button>\n                </div>\n            ]\n        )\n    }\n}\n\nexport { SearchBar, ShoppingList, Toggle };","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}